{
	"info": {
		"_postman_id": "email-forwarding-service-collection",
		"name": "Email Forwarding Service API",
		"description": "Complete API collection for the Email Forwarding Service with authentication, email sending, and monitoring endpoints.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "email-service"
	},
	"item": [
		{
			"name": "Health & Monitoring",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has status field\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('healthy');",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Check the health status of the email service, including SMTP configuration and token setup."
					},
					"response": [
						{
							"name": "Healthy Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/health",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2025-09-12T14:30:25.123456\",\n  \"smtp_configured\": true,\n  \"tokens_configured\": 3,\n  \"logo_available\": true\n}"
						}
					]
				},
				{
					"name": "Service Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has service info\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('service');",
									"    pm.expect(jsonData).to.have.property('version');",
									"    pm.expect(jsonData).to.have.property('endpoints');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Get basic information about the email forwarding service."
					},
					"response": [
						{
							"name": "Service Info Response",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/",
									"host": [
										"{{base_url}}"
									],
									"path": [
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"service\": \"Email Forwarding Service\",\n  \"version\": \"1.0.0\",\n  \"status\": \"active\",\n  \"endpoints\": {\n    \"send\": \"POST /send\",\n    \"docs\": \"GET /docs\",\n    \"health\": \"GET /health\"\n  }\n}"
						}
					]
				}
			],
			"description": "Endpoints for monitoring service health and getting basic information."
		},
		{
			"name": "Email Operations",
			"item": [
				{
					"name": "Send Basic Email",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure auth token is set",
									"if (!pm.globals.get(\"auth_token\")) {",
									"    console.log(\"Setting default auth token\");",
									"    pm.globals.set(\"auth_token\", \"demo_token_abc123\");",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email sent successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"    pm.expect(jsonData.status).to.eql('sent');",
									"    pm.expect(jsonData).to.have.property('recipients');",
									"    pm.expect(jsonData.recipients).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Response time is reasonable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Test Email from Postman\",\n  \"message\": \"This is a test email sent from Postman.\\n\\nIt demonstrates basic functionality of the Email Forwarding Service.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"send"
							]
						},
						"description": "Send a basic email with title and message."
					},
					"response": [
						{
							"name": "Successful Send",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer demo_token_abc123"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Test Email\",\n  \"message\": \"This is a test message.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/send",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"send"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"sent\",\n  \"recipients\": [\"support@example.com\"]\n}"
						}
					]
				},
				{
					"name": "Send Alert Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email sent successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('sent');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"üö® Critical System Alert\",\n  \"message\": \"URGENT: System Alert Detected\\n\\nüìä Issue Details:\\n‚Ä¢ CPU Usage: 95%\\n‚Ä¢ Memory Usage: 87%\\n‚Ä¢ Disk Space: 92% full\\n\\n‚ö†Ô∏è Action Required:\\nPlease investigate immediately and take corrective action.\\n\\nüîó Dashboard: https://monitoring.example.com\\nüìû On-call: +1-555-0123\\n\\nTimestamp: {{$timestamp}}\\nServer: prod-web-01\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"send"
							]
						},
						"description": "Send a critical system alert email with rich formatting and multiple lines."
					},
					"response": []
				},
				{
					"name": "Send Welcome Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Email sent successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('sent');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Welcome to Our Service! üéâ\",\n  \"message\": \"Hello and welcome!\\n\\nThank you for joining our service. Here's what you can expect:\\n\\n‚úÖ 24/7 support\\n‚úÖ Real-time notifications\\n‚úÖ Secure email forwarding\\n‚úÖ Beautiful HTML templates\\n\\nIf you have any questions, please don't hesitate to contact us.\\n\\nBest regards,\\nThe Team\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"send"
							]
						},
						"description": "Send a welcome email with friendly formatting and emojis."
					},
					"response": []
				}
			],
			"description": "Email sending operations with various types of content and formatting."
		},
		{
			"name": "Error Testing",
			"item": [
				{
					"name": "Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Error message is returned\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "invalid-token-12345",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Test Email\",\n  \"message\": \"This should fail due to invalid token.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"send"
							]
						},
						"description": "Test authentication with an invalid token - should return 403 Forbidden."
					},
					"response": [
						{
							"name": "Invalid Token Error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer invalid-token"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Test Email\",\n  \"message\": \"This should fail.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/send",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"send"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"detail\": \"Invalid token or unauthorized access\"\n}"
						}
					]
				},
				{
					"name": "Missing Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error message indicates missing auth\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Test Email\",\n  \"message\": \"This should fail due to missing authorization.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"send"
							]
						},
						"description": "Test request without Authorization header - should return 401 Unauthorized."
					},
					"response": []
				},
				{
					"name": "Missing Required Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message indicates missing fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Test Email\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"send"
							]
						},
						"description": "Test request with missing required 'message' field - should return 400 Bad Request."
					},
					"response": []
				},
				{
					"name": "Empty Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message indicates empty fields\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('detail');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"\",\n  \"message\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/send",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"send"
							]
						},
						"description": "Test request with empty title and message fields - should return 400 Bad Request."
					},
					"response": []
				}
			],
			"description": "Test various error conditions and edge cases."
		},
		{
			"name": "Documentation",
			"item": [
				{
					"name": "OpenAPI Schema",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/docs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"docs"
							]
						},
						"description": "Access the interactive OpenAPI documentation (Swagger UI)."
					},
					"response": []
				},
				{
					"name": "ReDoc Documentation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/redoc",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"redoc"
							]
						},
						"description": "Access the alternative ReDoc documentation interface."
					},
					"response": []
				}
			],
			"description": "Access API documentation and schema."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set dynamic variables if not already set",
					"if (!pm.globals.get(\"base_url\")) {",
					"    pm.globals.set(\"base_url\", \"http://localhost:8080\");",
					"}",
					"",
					"// Set timestamp for dynamic content",
					"pm.globals.set(\"timestamp\", new Date().toISOString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to check response format",
					"pm.test(\"Response is JSON\", function () {",
					"    pm.response.to.be.withBody;",
					"    pm.response.to.be.json;",
					"});",
					"",
					"// Log response time for monitoring",
					"console.log(`Response time: ${pm.response.responseTime}ms`);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"description": "Base URL for the Email Forwarding Service API"
		},
		{
			"key": "auth_token",
			"value": "demo_token_abc123",
			"description": "Authentication token for API requests"
		}
	]
}